// Code generated by MockGen. DO NOT EDIT.
// Source: covalyzer.go
//
// Generated by this command:
//
//	mockgen -source=covalyzer.go -destination=covalyzer.go_mock_test.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	v1 "github.com/nokamoto/covalyzer-go/pkg/api/v1"
	gomock "go.uber.org/mock/gomock"
)

// Mockgh is a mock of gh interface.
type Mockgh struct {
	ctrl     *gomock.Controller
	recorder *MockghMockRecorder
}

// MockghMockRecorder is the mock recorder for Mockgh.
type MockghMockRecorder struct {
	mock *Mockgh
}

// NewMockgh creates a new mock instance.
func NewMockgh(ctrl *gomock.Controller) *Mockgh {
	mock := &Mockgh{ctrl: ctrl}
	mock.recorder = &MockghMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgh) EXPECT() *MockghMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *Mockgh) Checkout(repo *v1.Repository, timestamp string) (*v1.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", repo, timestamp)
	ret0, _ := ret[0].(*v1.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockghMockRecorder) Checkout(repo, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*Mockgh)(nil).Checkout), repo, timestamp)
}

// Clone mocks base method.
func (m *Mockgh) Clone(arg0 *v1.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockghMockRecorder) Clone(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*Mockgh)(nil).Clone), arg0)
}

// Mockgotool is a mock of gotool interface.
type Mockgotool struct {
	ctrl     *gomock.Controller
	recorder *MockgotoolMockRecorder
}

// MockgotoolMockRecorder is the mock recorder for Mockgotool.
type MockgotoolMockRecorder struct {
	mock *Mockgotool
}

// NewMockgotool creates a new mock instance.
func NewMockgotool(ctrl *gomock.Controller) *Mockgotool {
	mock := &Mockgotool{ctrl: ctrl}
	mock.recorder = &MockgotoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgotool) EXPECT() *MockgotoolMockRecorder {
	return m.recorder
}

// CoverGinkgoOutline mocks base method.
func (m *Mockgotool) CoverGinkgoOutline(repo *v1.Repository) ([]*v1.GinkgoOutlineCover, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverGinkgoOutline", repo)
	ret0, _ := ret[0].([]*v1.GinkgoOutlineCover)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoverGinkgoOutline indicates an expected call of CoverGinkgoOutline.
func (mr *MockgotoolMockRecorder) CoverGinkgoOutline(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverGinkgoOutline", reflect.TypeOf((*Mockgotool)(nil).CoverGinkgoOutline), repo)
}

// CoverGinkgoReport mocks base method.
func (m *Mockgotool) CoverGinkgoReport(repo *v1.Repository) ([]*v1.GinkgoReportCover, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverGinkgoReport", repo)
	ret0, _ := ret[0].([]*v1.GinkgoReportCover)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoverGinkgoReport indicates an expected call of CoverGinkgoReport.
func (mr *MockgotoolMockRecorder) CoverGinkgoReport(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverGinkgoReport", reflect.TypeOf((*Mockgotool)(nil).CoverGinkgoReport), repo)
}

// CoverTotal mocks base method.
func (m *Mockgotool) CoverTotal(repo *v1.Repository) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverTotal", repo)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoverTotal indicates an expected call of CoverTotal.
func (mr *MockgotoolMockRecorder) CoverTotal(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverTotal", reflect.TypeOf((*Mockgotool)(nil).CoverTotal), repo)
}
